services:

  rediscachereader.worker:
    image: rediscachereader.worker
    build:
      context: .
      dockerfile: RedisCacheReader.Worker/Dockerfile
    environment:
      Connections__Redis__ConnectionString: 'redis:6379,abortConnect=false'
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
    depends_on: [ redis ]

  redisstreamreader.worker:
    image: redisstreamreader.worker
    build: 
      context: .
      dockerfile: RedisStreamReader.Worker/Dockerfile
    environment:
      Connections__Redis__ConnectionString: 'redis:6379,abortConnect=false'
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
    depends_on: [ redis ]

  apicaller.worker:
    image: apicaller.worker
    build:
      context: .
      dockerfile: ApiCaller.Worker/Dockerfile
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      Connections__Api__BaseUrl: http://kafkawriter.api:8080
    depends_on: [ kafkawriter.api ]

  kafkawriter.api:
    image: kafkawriter.api
    build:
      context: .
      dockerfile: KafkaWriter.Api/Dockerfile
    environment:
      Connections__Kafka__Brokers: kafka:29092
      Connections__Redis__ConnectionString: 'redis:6379,abortConnect=false'
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
    depends_on: [ kafka, redis ]
    ports:
      - "5052:8080"

  kafkareader.worker:
    image: kafkareader.worker
    build:
      context: .
      dockerfile: KafkaReader.Worker/Dockerfile
    environment:
      Connections__Redis__ConnectionString: 'redis:6379,abortConnect=false'
      Connections__Kafka__Brokers: kafka:29092
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
    depends_on: [ kafka ]
  
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:6.1.9
    hostname: kafka
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    restart: always
  
  init-kafka:
    image: confluentinc/cp-kafka:6.1.9
    depends_on:
      - kafka
    command: >
      sh -c "
      kafka-topics --bootstrap-server kafka:29092 --list &&
      cub kafka-ready -b kafka:29092 1 30 && 
      echo -e 'Creating kafka topics' && 
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic my-topic-name --replication-factor 1 --partitions 1 && 
      echo -e 'Successfully created the following topics:' && 
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always
  
  redis:
    container_name: redis
    image: redis:7.0
    restart: always
    ports:
      - '6379:6379'
  
  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=redis
    ports:
      - "8081:8081"

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:29092'
    restart: always
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./_compose/prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    environment:
      #      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - 3000:3000
    volumes:
      - ./_compose/grafana:/etc/grafana/provisioning/datasources

  otel-collector:
    image: otel/opentelemetry-collector:0.88.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./_compose/otel-collector/config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "4317:4317"   # OTLP gRPC receiver
    depends_on:
      - 'jaeger'

  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: always
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=${PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR:-true}
      - PROMETHEUS_QUERY_NAMESPACE=${PROMETHEUS_QUERY_NAMESPACE:-}
      - PROMETHEUS_QUERY_DURATION_UNIT=${PROMETHEUS_QUERY_DURATION_UNIT:-}
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    ports:
      - "16686:16686"
      - "14268"
      - "14250"
volumes:
  prom_data:       